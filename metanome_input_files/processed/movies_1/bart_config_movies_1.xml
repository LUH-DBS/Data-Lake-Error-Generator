<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5432/movies_1</uri>
            <schema>target</schema>
            <login>postgres</login>
            <password>postgres</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="movies_1">/Users/fatemehahmadi/Documents/Github-Private/ED-Scale/Sandbox_Generation/metanome_input_files/processed/movies_1/movies_1.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies><![CDATA[DCs: 

            e1: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $name1 != $name2 -> #fail. 

        
            e2: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $year1 != $year2 -> #fail. 

        
            e3: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $release_date1 != $release_date2 -> #fail. 

        
            e4: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $director1 != $director2 -> #fail. 

        
            e5: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $creator1 != $creator2 -> #fail. 

        
            e6: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $actors1 != $actors2 -> #fail. 

        
            e7: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $cast1 != $cast2 -> #fail. 

        
            e8: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $language1 != $language2 -> #fail. 

        
            e9: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $country1 != $country2 -> #fail. 

        
            e10: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $duration1 != $duration2 -> #fail. 

        
            e11: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $rating_value1 != $rating_value2 -> #fail. 

        
            e12: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $rating_count1 != $rating_count2 -> #fail. 

        
            e13: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $review_count1 != $review_count2 -> #fail. 

        
            e14: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $genre1 != $genre2 -> #fail. 

        
            e15: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $filming_locations1 != $filming_locations2 -> #fail. 

        
            e16: movies_1(id: $id1, name: $name1, year: $year1, release_date: $release_date1, director: $director1, creator: $creator1, actors: $actors1, cast: $cast1, language: $language1, country: $country1, duration: $duration1, rating_value: $rating_value1, rating_count: $rating_count1, review_count: $review_count1, genre: $genre1, filming_locations: $filming_locations1, description: $description1),
            movies_1(id: $id2, name: $name2, year: $year2, release_date: $release_date2, director: $director2, creator: $creator2, actors: $actors2, cast: $cast2, language: $language2, country: $country2, duration: $duration2, rating_value: $rating_value2, rating_count: $rating_count2, review_count: $review_count2, genre: $genre2, filming_locations: $filming_locations2, description: $description2),
                $id1 == $id2, $description1 != $description2 -> #fail. 

        ]]></dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>./</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>movies_1_changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
            <vioGenQuery id="e1"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e1"><comparison>(name1 != name2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(year1 != year2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(release_date1 != release_date2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(director1 != director2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(creator1 != creator2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(actors1 != actors2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(cast1 != cast2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(language1 != language2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(country1 != country2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(id1 == id2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(duration1 != duration2)</comparison><percentage>0.06765899864682004</percentage></vioGenQuery><vioGenQuery id="e11"><comparison>(id1 == id2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e11"><comparison>(rating_value1 != rating_value2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e12"><comparison>(id1 == id2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e12"><comparison>(rating_count1 != rating_count2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e13"><comparison>(id1 == id2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e13"><comparison>(review_count1 != review_count2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e14"><comparison>(id1 == id2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e14"><comparison>(genre1 != genre2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e15"><comparison>(id1 == id2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e15"><comparison>(filming_locations1 != filming_locations2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e16"><comparison>(id1 == id2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery><vioGenQuery id="e16"><comparison>(description1 != description2)</comparison><percentage>0.05412719891745603</percentage></vioGenQuery></vioGenQueries>
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy> TypoRandom </strategy>
            </defaultStrategy> 
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <randomErrors>
            <tables>
                <table name="movies_1"> 
                    <percentage>1</percentage> <!-- Percentage is wrt attributes to dirty in the table -->
                    <attributes>
                    <atrribute>id</atrribute><atrribute>name</atrribute><atrribute>release_date</atrribute><atrribute>director</atrribute><atrribute>creator</atrribute><atrribute>actors</atrribute><atrribute>cast</atrribute><atrribute>language</atrribute><atrribute>country</atrribute><atrribute>duration</atrribute><atrribute>review_count</atrribute><atrribute>genre</atrribute><atrribute>filming_locations</atrribute><atrribute>description</atrribute></attributes>
                </table>
            </tables>
        </randomErrors>
    
        <outlierErrors>
            <tables>
                <table name="movies_1">
                    <attributes>
                    <atrribute percentage="0" detectable="true">year</atrribute><atrribute percentage="0" detectable="true">rating_value</atrribute><atrribute percentage="0" detectable="true">rating_count</atrribute></attributes>
                </table>
            </tables>
        </outlierErrors>
        
        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>